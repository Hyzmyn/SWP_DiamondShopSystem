// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Models;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(DiamondShopContext))]
    [Migration("20240710084334_v1")]
    partial class v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Models.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountID"));

                    b.Property<decimal>("DiscountAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DiscountDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DiscountStatus")
                        .HasColumnType("bit");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.HasKey("DiscountID");

                    b.HasIndex("OrderID");

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            DiscountID = 1,
                            DiscountAmount = 10.0m,
                            DiscountCode = "SUMMERSALE10",
                            DiscountDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountStatus = true,
                            OrderID = 1
                        },
                        new
                        {
                            DiscountID = 2,
                            DiscountAmount = 15.0m,
                            DiscountCode = "NEWCUSTOMER15",
                            DiscountDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountStatus = true,
                            OrderID = 2
                        },
                        new
                        {
                            DiscountID = 3,
                            DiscountAmount = 20.0m,
                            DiscountCode = "HOLIDAYDISCOUNT20",
                            DiscountDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountStatus = true,
                            OrderID = 3
                        },
                        new
                        {
                            DiscountID = 4,
                            DiscountAmount = 5.0m,
                            DiscountCode = "SPECIALOFFER5",
                            DiscountDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountStatus = true,
                            OrderID = 4
                        });
                });

            modelBuilder.Entity("Repository.Models.Gem", b =>
                {
                    b.Property<int>("GemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GemID"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fluorescence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("FourC")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("GemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GemName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Polish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Proportion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Symmetry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GemID");

                    b.ToTable("Gems");

                    b.HasData(
                        new
                        {
                            GemID = 1,
                            Active = true,
                            DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fluorescence = "None",
                            FourC = 4.5m,
                            GemCode = "EMGR-001",
                            GemName = "Emerald",
                            Origin = "Brazil",
                            Polish = "Excellent",
                            Proportion = "Excellent",
                            Symmetry = "Excellent"
                        },
                        new
                        {
                            GemID = 2,
                            Active = true,
                            DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fluorescence = "Faint",
                            FourC = 3.8m,
                            GemCode = "SAPP-002",
                            GemName = "Sapphire",
                            Origin = "Australia",
                            Polish = "Excellent",
                            Proportion = "VeryGood",
                            Symmetry = "Very Good"
                        },
                        new
                        {
                            GemID = 3,
                            Active = true,
                            DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fluorescence = "None",
                            FourC = 4.9m,
                            GemCode = "DIAM-003",
                            GemName = "Diamond",
                            Origin = "Canada",
                            Polish = "Ideal",
                            Proportion = "Ideal",
                            Symmetry = "Ideal"
                        },
                        new
                        {
                            GemID = 4,
                            Active = true,
                            DateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Fluorescence = "Faint",
                            FourC = 3.2m,
                            GemCode = "RUBY-004",
                            GemName = "Ruby",
                            Origin = "Russia",
                            Polish = "Very Good",
                            Proportion = "Excellent",
                            Symmetry = "Excellent"
                        });
                });

            modelBuilder.Entity("Repository.Models.GemPriceList", b =>
                {
                    b.Property<int>("GemID")
                        .HasColumnType("int");

                    b.Property<decimal>("CaratWeight")
                        .HasPrecision(8, 2)
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("GemID");

                    b.ToTable("GemPriceLists");

                    b.HasData(
                        new
                        {
                            GemID = 1,
                            CaratWeight = 2.05m,
                            Clarity = "VVS1",
                            Color = "D",
                            Cut = "Excellent",
                            Price = 0m
                        },
                        new
                        {
                            GemID = 2,
                            CaratWeight = 1.8m,
                            Clarity = "VS2",
                            Color = "E",
                            Cut = "VeryGood",
                            Price = 0m
                        },
                        new
                        {
                            GemID = 3,
                            CaratWeight = 3.02m,
                            Clarity = "IF",
                            Color = "F",
                            Cut = "Good",
                            Price = 0m
                        },
                        new
                        {
                            GemID = 4,
                            CaratWeight = 1.2m,
                            Clarity = "SI1",
                            Color = "J",
                            Cut = "Excellent",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("Repository.Models.MaterialPriceList", b =>
                {
                    b.Property<int>("MaterialID")
                        .HasColumnType("int");

                    b.Property<decimal>("BuyPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("EffDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("SellPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("MaterialID");

                    b.ToTable("MaterialPriceLists");

                    b.HasData(
                        new
                        {
                            MaterialID = 1,
                            BuyPrice = 18.75m,
                            EffDate = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SellPrice = 25.0m
                        },
                        new
                        {
                            MaterialID = 2,
                            BuyPrice = 14.50m,
                            EffDate = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SellPrice = 20.0m
                        },
                        new
                        {
                            MaterialID = 3,
                            BuyPrice = 16.25m,
                            EffDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SellPrice = 22.0m
                        },
                        new
                        {
                            MaterialID = 4,
                            BuyPrice = 19.00m,
                            EffDate = new DateTime(2023, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SellPrice = 26.0m
                        });
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<bool>("DeliveryStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OrderStatus")
                        .HasColumnType("bit");

                    b.Property<DateTime>("TimeOrder")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            DeliveryStatus = false,
                            Note = "Express delivery",
                            OrderStatus = true,
                            TimeOrder = new DateTime(2023, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 175.0m,
                            UserID = 1
                        },
                        new
                        {
                            OrderID = 2,
                            DeliveryStatus = false,
                            Note = "Standard delivery",
                            OrderStatus = true,
                            TimeOrder = new DateTime(2023, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 170.0m,
                            UserID = 2
                        },
                        new
                        {
                            OrderID = 3,
                            DeliveryStatus = false,
                            Note = "Pickup in-store",
                            OrderStatus = false,
                            TimeOrder = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 120.0m,
                            UserID = 3
                        },
                        new
                        {
                            OrderID = 4,
                            DeliveryStatus = false,
                            Note = "Express delivery",
                            OrderStatus = true,
                            TimeOrder = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 90.0m,
                            UserID = 1
                        },
                        new
                        {
                            OrderID = 5,
                            DeliveryStatus = false,
                            Note = "Standard delivery",
                            OrderStatus = true,
                            TimeOrder = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalPrice = 60.0m,
                            UserID = 2
                        });
                });

            modelBuilder.Entity("Repository.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailID"));

                    b.Property<string>("NiSize")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailID = 1,
                            NiSize = "7",
                            OrderID = 1,
                            Price = 50.0m,
                            ProductID = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailID = 2,
                            NiSize = "8",
                            OrderID = 1,
                            Price = 75.0m,
                            ProductID = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailID = 3,
                            NiSize = "6",
                            OrderID = 2,
                            Price = 40.0m,
                            ProductID = 3,
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailID = 4,
                            NiSize = "9",
                            OrderID = 2,
                            Price = 90.0m,
                            ProductID = 4,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("Repository.Models.PriceRateList", b =>
                {
                    b.Property<int>("PriceRateID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EffDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PriceRate")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("PriceRateID");

                    b.ToTable("PriceRateLists");

                    b.HasData(
                        new
                        {
                            PriceRateID = 1,
                            EffDate = new DateTime(2023, 5, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceRate = 10m
                        },
                        new
                        {
                            PriceRateID = 2,
                            EffDate = new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceRate = 10m
                        },
                        new
                        {
                            PriceRateID = 3,
                            EffDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceRate = 11m
                        },
                        new
                        {
                            PriceRateID = 4,
                            EffDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PriceRate = 11m
                        });
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("GemID")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceRateID")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ProductionCost")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalCost")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("Weight")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("GemID");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            GemID = 1,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P001",
                            ProductName = "Diamond Necklace",
                            ProductionCost = 150.0m,
                            TotalCost = 0m,
                            Weight = 20.5m
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 2,
                            GemID = 2,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P002",
                            ProductName = "Gold Ring",
                            ProductionCost = 100.0m,
                            TotalCost = 0m,
                            Weight = 15.7m
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 3,
                            GemID = 3,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P003",
                            ProductName = "Emerald Bracelet",
                            ProductionCost = 120.0m,
                            TotalCost = 0m,
                            Weight = 22.1m
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 4,
                            GemID = 4,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P004",
                            ProductName = "Silver Earrings",
                            ProductionCost = 80.0m,
                            TotalCost = 0m,
                            Weight = 18.2m
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 3,
                            GemID = 1,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P005",
                            ProductName = "Sapphire Pendant",
                            ProductionCost = 130.0m,
                            TotalCost = 0m,
                            Weight = 2.2m
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 4,
                            GemID = 2,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P006",
                            ProductName = "Platinum Bracelet",
                            ProductionCost = 200.0m,
                            TotalCost = 0m,
                            Weight = 3.1m
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 1,
                            GemID = 3,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P007",
                            ProductName = "Ruby Ring",
                            ProductionCost = 90.0m,
                            TotalCost = 0m,
                            Weight = 1.2m
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 2,
                            GemID = 4,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P008",
                            ProductName = "Amethyst Earrings",
                            ProductionCost = 70.0m,
                            TotalCost = 0m,
                            Weight = 1.9m
                        },
                        new
                        {
                            ProductID = 9,
                            CategoryID = 1,
                            GemID = 1,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P009",
                            ProductName = "Topaz Necklace",
                            ProductionCost = 110.0m,
                            TotalCost = 0m,
                            Weight = 3.1m
                        },
                        new
                        {
                            ProductID = 10,
                            CategoryID = 2,
                            GemID = 2,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P010",
                            ProductName = "Opal Brooch",
                            ProductionCost = 95.0m,
                            TotalCost = 0m,
                            Weight = 4m
                        },
                        new
                        {
                            ProductID = 11,
                            CategoryID = 1,
                            GemID = 1,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P001",
                            ProductName = "Diamond Necklace",
                            ProductionCost = 150.0m,
                            TotalCost = 0m,
                            Weight = 1.2m
                        },
                        new
                        {
                            ProductID = 12,
                            CategoryID = 2,
                            GemID = 2,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P002",
                            ProductName = "Gold Ring",
                            ProductionCost = 100.0m,
                            TotalCost = 0m,
                            Weight = 2.4m
                        },
                        new
                        {
                            ProductID = 13,
                            CategoryID = 3,
                            GemID = 3,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P003",
                            ProductName = "Emerald Bracelet",
                            ProductionCost = 120.0m,
                            TotalCost = 0m,
                            Weight = 3m
                        },
                        new
                        {
                            ProductID = 14,
                            CategoryID = 4,
                            GemID = 4,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P004",
                            ProductName = "Silver Earrings",
                            ProductionCost = 80.0m,
                            TotalCost = 0m,
                            Weight = 4.5m
                        },
                        new
                        {
                            ProductID = 15,
                            CategoryID = 3,
                            GemID = 1,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P005",
                            ProductName = "Sapphire Pendant",
                            ProductionCost = 130.0m,
                            TotalCost = 0m,
                            Weight = 2.5m
                        },
                        new
                        {
                            ProductID = 16,
                            CategoryID = 4,
                            GemID = 2,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P006",
                            ProductName = "Platinum Bracelet",
                            ProductionCost = 200.0m,
                            TotalCost = 0m,
                            Weight = 3.1m
                        },
                        new
                        {
                            ProductID = 17,
                            CategoryID = 1,
                            GemID = 3,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P007",
                            ProductName = "Ruby Ring",
                            ProductionCost = 90.0m,
                            TotalCost = 0m,
                            Weight = 4.1m
                        },
                        new
                        {
                            ProductID = 18,
                            CategoryID = 2,
                            GemID = 4,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P008",
                            ProductName = "Amethyst Earrings",
                            ProductionCost = 70.0m,
                            TotalCost = 0m,
                            Weight = 1.8m
                        },
                        new
                        {
                            ProductID = 19,
                            CategoryID = 1,
                            GemID = 1,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P009",
                            ProductName = "Topaz Necklace",
                            ProductionCost = 110.0m,
                            TotalCost = 0m,
                            Weight = 3.5m
                        },
                        new
                        {
                            ProductID = 20,
                            CategoryID = 2,
                            GemID = 2,
                            ImageUrl1 = "1.jpg",
                            ImageUrl2 = "2.jpg",
                            PriceRateID = 1m,
                            ProductCode = "P010",
                            ProductName = "Opal Brooch",
                            ProductionCost = 95.0m,
                            TotalCost = 0m,
                            Weight = 2.6m
                        });
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NiSize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<bool>("UserStatus")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserID = 1,
                            Address = "Address1",
                            CreatedAt = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            NiSize = "S",
                            Password = "123",
                            PhoneNumber = "1234567890",
                            RoleID = 1,
                            UserStatus = true,
                            Username = "User1"
                        },
                        new
                        {
                            UserID = 2,
                            Address = "Address2",
                            CreatedAt = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            NiSize = "M",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleID = 2,
                            UserStatus = true,
                            Username = "User2"
                        },
                        new
                        {
                            UserID = 3,
                            Address = "Address3",
                            CreatedAt = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            NiSize = "M",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleID = 3,
                            UserStatus = true,
                            Username = "User3"
                        },
                        new
                        {
                            UserID = 4,
                            Address = "Address4",
                            CreatedAt = new DateTime(2023, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            NiSize = "M",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleID = 4,
                            UserStatus = true,
                            Username = "User4"
                        },
                        new
                        {
                            UserID = 5,
                            Address = "Address5",
                            CreatedAt = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            NiSize = "M",
                            Password = "123",
                            PhoneNumber = "0987654321",
                            RoleID = 5,
                            UserStatus = true,
                            Username = "User5"
                        },
                        new
                        {
                            UserID = 6,
                            Address = "Address",
                            CreatedAt = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            NiSize = "M",
                            Password = "1",
                            PhoneNumber = "0987654321",
                            RoleID = 5,
                            UserStatus = true,
                            Username = "User6"
                        },
                        new
                        {
                            UserID = 7,
                            Address = "Address",
                            CreatedAt = new DateTime(2023, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            NiSize = "M",
                            Password = "1",
                            PhoneNumber = "0987654321",
                            RoleID = 5,
                            UserStatus = true,
                            Username = "User7"
                        },
                        new
                        {
                            UserID = 8,
                            Address = "Address",
                            CreatedAt = new DateTime(2023, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            NiSize = "M",
                            Password = "1",
                            PhoneNumber = "0987654321",
                            RoleID = 5,
                            UserStatus = true,
                            Username = "User8"
                        },
                        new
                        {
                            UserID = 9,
                            Address = "Address",
                            CreatedAt = new DateTime(2023, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            NiSize = "M",
                            Password = "1",
                            PhoneNumber = "0987654321",
                            RoleID = 5,
                            UserStatus = true,
                            Username = "User9"
                        });
                });

            modelBuilder.Entity("Repository.Models.WalletPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Point")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("WalletPoints");
                });

            modelBuilder.Entity("Repository.Models.Warranty", b =>
                {
                    b.Property<int>("WarrantyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantyID"));

                    b.Property<DateTime>("BuyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Instance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("WarrantyStatus")
                        .HasColumnType("bit");

                    b.HasKey("WarrantyID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("Warranties");

                    b.HasData(
                        new
                        {
                            WarrantyID = 1,
                            BuyDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Instance = "ACME-01",
                            OrderID = 1,
                            ProductID = 1,
                            WarrantyStatus = true
                        },
                        new
                        {
                            WarrantyID = 2,
                            BuyDate = new DateTime(2023, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Instance = "TECH-02",
                            OrderID = 2,
                            ProductID = 2,
                            WarrantyStatus = true
                        },
                        new
                        {
                            WarrantyID = 3,
                            BuyDate = new DateTime(2023, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Instance = "ELITE-03",
                            OrderID = 3,
                            ProductID = 3,
                            WarrantyStatus = true
                        },
                        new
                        {
                            WarrantyID = 4,
                            BuyDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EndDate = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Instance = "BASIC-04",
                            OrderID = 4,
                            ProductID = 4,
                            WarrantyStatus = true
                        });
                });

            modelBuilder.Entity("Repository.Models.Discount", b =>
                {
                    b.HasOne("Repository.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Repository.Models.GemPriceList", b =>
                {
                    b.HasOne("Repository.Models.Gem", "Gem")
                        .WithOne("GemPriceList")
                        .HasForeignKey("Repository.Models.GemPriceList", "GemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gem");
                });

            modelBuilder.Entity("Repository.Models.MaterialPriceList", b =>
                {
                    b.HasOne("Repository.Models.Product", "Product")
                        .WithMany("MaterialPriceLists")
                        .HasForeignKey("MaterialID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.OrderDetail", b =>
                {
                    b.HasOne("Repository.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Models.PriceRateList", b =>
                {
                    b.HasOne("Repository.Models.Product", "Products")
                        .WithMany("PriceRateLists")
                        .HasForeignKey("PriceRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.HasOne("Repository.Models.Gem", "Gems")
                        .WithMany("Products")
                        .HasForeignKey("GemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gems");
                });

            modelBuilder.Entity("Repository.Models.WalletPoint", b =>
                {
                    b.HasOne("Repository.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Models.Warranty", b =>
                {
                    b.HasOne("Repository.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Repository.Models.Gem", b =>
                {
                    b.Navigation("GemPriceList")
                        .IsRequired();

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Repository.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Repository.Models.Product", b =>
                {
                    b.Navigation("MaterialPriceLists");

                    b.Navigation("OrderDetails");

                    b.Navigation("PriceRateLists");
                });

            modelBuilder.Entity("Repository.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
